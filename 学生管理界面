public class dormitoryUpdateUi extends JFrame{
	private JScrollPane JSPane;
	private JTree Tree;
	private JPanel panel;
	private DefaultMutableTreeNode tmpNode,root;
	private DefaultTreeModel insert;
	private ArrayList<Dormitory> dormitory;
	private JTextField id;
	private JTextField sex;
	private JTextField ynumber;
	private JTextField snumber;
	private JTextField student;
	private JTextField money;
	private JTextField note;
	private JButton btn_query,btn_Modify,btn_Delete;
	private String attribute;
	private String changeAttribute;
public dormitoryUpdateUi(){
		this.setTitle("宿舍更新");
		this.setVisible(true);
		this.setSize(800, 600);
		this.setResizable(false);
		this.setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
		this.setLocationRelativeTo(null);
		this.setLayout(new BorderLayout());
		root=new DefaultMutableTreeNode("文赢13号楼                  ");
		insert=new DefaultTreeModel(root);
		Tree=new JTree(root);
		Tree.addTreeSelectionListener(new treeSelectActionListener());
		JSPane=new JScrollPane(Tree);
		this.add(JSPane, BorderLayout.WEST);
		panel=new JPanel();
		//panel.setPreferredSize(getPreferredSize());
		this.add(panel, BorderLayout.CENTER);
		panel.setLayout(new GridBagLayout());
		setComponent(new JLabel("宿舍号:"),0,0,1,1,false);
		id=new JTextField();
		id.addActionListener(new jf_ActionListener());
		setComponent(id,1,0,3,1,true);
		setComponent(new JLabel("住宿性别名:"),0,1,1,1,false);
		sex=new JTextField();
		sex.addActionListener(new jf_ActionListener());
		setComponent(sex,1,1,3,150,true);
		setComponent(new JLabel("应住人数:"),0,2,1,1,false);
		ynumber=new JTextField();
		ynumber.addActionListener(new jf_ActionListener());
		setComponent(ynumber,1,2,3,150,true);
		setComponent(new JLabel("实住人数:"),0,3,1,1,false);
		snumber=new JTextField();
		snumber.addActionListener(new jf_ActionListener());
		setComponent(snumber,1,3,3,150,true);
		setComponent(new JLabel("住宿费:"),0,4,1,1,false);
		money=new JTextField();
		money.addActionListener(new jf_ActionListener());
		setComponent(money,1,4,3,1,true);
		setComponent(new JLabel("舍长:"),0,5,1,1,false);
		student=new JTextField();
		student.addActionListener(new jf_ActionListener());
		setComponent(student,1,5,3,1,true);
		setComponent(new JLabel("备注"),0,6,1,1,false);
		note=new JTextField();
		note.addActionListener(new jf_ActionListener());
		setComponent(note,1,6,3,150,true);
		btn_query=new JButton("查询");
		btn_query.addActionListener(new btn_queryActionListener());
		setComponent(btn_query,0,7,1,1,false);
		btn_Modify=new JButton("修改");
		btn_Modify.addActionListener(new btn_ModifyActionListener());
		setComponent(btn_Modify,1,7,1,1,false);
		btn_Delete=new JButton("删除");
		btn_Delete.addActionListener(new btn_DeleteActionListener());
		setComponent(btn_Delete,2,7,1,1,false);
	}
	
	private class btn_queryActionListener implements ActionListener{
		@Override
public void actionPerformed(ActionEvent e) {
			jdbcDormitory jd=new jdbcDormitory();
			HashMap<Integer,ArrayList<Dormitory> > number=new HashMap<Integer,ArrayList<Dormitory>>();
			ArrayList<Dormitory> floordormitory;
		    int temp;//统计楼数
			try {
				jd.dormitoryQuery("");
				dormitory=jd.getDormitory();
				for(Dormitory d:dormitory){
					temp=Integer.parseInt(d.getDormitoryId().substring(2,3));
					if(!number.containsKey(temp)){
						floordormitory=new ArrayList<Dormitory>();
						floordormitory.add(d);
						number.put(temp, floordormitory);
					}else{
					  number.get(temp).add(d);
					}
				}
				Object[] floors;
				floors=number.keySet().toArray();
				for(int i=0;i<floors.length;i++)
				{
					floordormitory=number.get(floors[i]);
					tmpNode=new DefaultMutableTreeNode(floors[i]+"楼");
					insert.insertNodeInto(tmpNode, root, 0);
					insert.reload();
					for(int j=0;j<floordormitory.size();j++){
						tmpNode.add(new DefaultMutableTreeNode(floordormitory.get(j).getDormitoryId()));
					}
					floordormitory=null;
				}
			} catch (SQLException e1) {
				e1.printStackTrace();
			}finally{
				jdbcDrive.jdbcConnectionClose();
			}
		}
	}
	private class treeSelectActionListener implements TreeSelectionListener{
		@Override
public void valueChanged(TreeSelectionEvent e) {
			if(e.getPath().getLastPathComponent().toString().length()==5){
			Dormitory d=null;
			String message=e.getPath().getLastPathComponent().toString();
			for(Dormitory dor: dormitory){
				if(dor.getDormitoryId().equals(message)){
					d=dor;
				}
			}
			 id.setText(d.getDormitoryId());
			 sex.setText(d.getDormitorySex());
		     ynumber.setText(d.getDormitoryPeople());
			 snumber.setText(d.getDormitoryPeopleNow());
			 student.setText(d.getStudentId());
			 money.setText(d.getMoney());
			 note.setText(d.getDormitoryNote());
			}
		}
	}
	
	private class btn_ModifyActionListener implements ActionListener{
 
		@Override
		public void actionPerformed(ActionEvent e) {
			jdbcDormitory jd=new jdbcDormitory();
			try{
				jd.dormitoryModify(id.getText().trim()
						, attribute,changeAttribute);
			JOptionPane.showMessageDialog(dormitoryUpdateUi.this,"修改成功" );
			id.setText("");
			sex.setText("");
		    ynumber.setText("");
		    snumber.setText("");
			student.setText("");
		    money.setText("");
			note.setText("");
		}catch(Exception e1){
			e1.printStackTrace();
			System.out.println("修改失败");
			JOptionPane.showMessageDialog(dormitoryUpdateUi.this,"修改失败" );
		}finally{
			jdbcDrive.jdbcConnectionClose();
		}
		}
	}
	
	private class jf_ActionListener implements ActionListener{
		@Override
public void actionPerformed(ActionEvent e) {
			HashMap<JTextField,String> change=new HashMap<JTextField,String>();
			change.put(id, "Dnumber");
			change.put(sex, "Dsex");
			change.put(ynumber, "Dynumber ");
			change.put(snumber, "Dsnumber ");
			change.put(student, "Dstudent ");
			change.put(money, "Dmoney ");
			change.put(note, "Dnote");
			attribute=change.get((JTextField)e.getSource());
			changeAttribute=((JTextField)e.getSource()).getText().trim();
		}
	}
	private class btn_DeleteActionListener implements ActionListener{
 
		@Override
public void actionPerformed(ActionEvent e) {
			Dormitory d=new Dormitory
					.DormitoryBuilder()
					.addDormitoryId(id.getText().trim())
					.CreateDormitory();
			jdbcDormitory js=new jdbcDormitory();
			try {
				js.dormitoryQuery("where Dnumber ="+"'"+""+d.getDormitoryId()+"'");
				if(Integer.parseInt(js.getDormitory().get(0).getDormitoryPeopleNow())!=0){
					JOptionPane.showMessageDialog(dormitoryUpdateUi.this, "宿舍有成员居住，无法删除");
				}else{
				js.dormitoryDelete(d);
				id.setText("");
				sex.setText("");
				ynumber.setText("");
				snumber.setText("");
				money.setText("");
				note.setText("");
				student.setText("");
				JOptionPane.showMessageDialog(dormitoryUpdateUi.this, "删除成功");
				}
			} catch (SQLException e1) {
				e1.printStackTrace();
				JOptionPane.showMessageDialog(dormitoryUpdateUi.this, "删除失败");
			}
		}
		
	}
	private void setComponent(JComponent component, int gridx, int gridy,
			int gridwidth, int ipadx, boolean fill) {
		final GridBagConstraints gridBagConstrains = new GridBagConstraints();
		gridBagConstrains.gridx = gridx;
		gridBagConstrains.gridy = gridy;
		gridBagConstrains.insets = new Insets(20, 20, 3, 1);
		if (gridwidth > 1)
			gridBagConstrains.gridwidth = gridwidth;
		if (ipadx > 0)
			gridBagConstrains.ipadx = ipadx;
		if (fill)
			gridBagConstrains.fill = GridBagConstraints.HORIZONTAL;
		panel.add(component, gridBagConstrains);
	}
	public static void main(String [] args){
		dormitoryUpdateUi d=new dormitoryUpdateUi();
	}
}
